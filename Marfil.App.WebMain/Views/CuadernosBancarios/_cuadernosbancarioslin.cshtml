@using System.Drawing
@using System.Text
@using System.Web.UI.WebControls
@using DevExpress.Data
@using Marfil.App.WebMain.Misc
@using Marfil.Dom.Persistencia.Helpers
@using Marfil.Dom.Persistencia.Model
@using Marfil.Dom.Persistencia.Model.Contabilidad
@using Marfil.Dom.Persistencia.Model.Documentos.Albaranes
@using Marfil.Dom.Persistencia.Model.Documentos.Pedidos
@using Marfil.Dom.Persistencia.Model.FicherosGenerales
@using Marfil.Dom.Persistencia.ServicesView.Servicios
@using Marfil.Dom.Persistencia.ServicesView.Servicios.Campoverificacion
@using Marfil.Inf.Genericos.Helper
@using Marfil.Inf.ResourcesGlobalization.Textos.Entidades
@using Marfil.Inf.ResourcesGlobalization.Textos.GeneralUI
@using Resources
@model IEnumerable<Marfil.Dom.Persistencia.Model.Contabilidad.CuadernosBancariosLinModel>
@{
    var isreadonly = ViewData["readonly"] != null ? (bool)ViewData["readonly"] : false;
    var iseditable = ViewData["operacion"] != null ? (bool)ViewData["operacion"] : false;
    var isNuevo = !isreadonly && !iseditable;

    Html.EnableClientValidation(true);
    Html.EnableUnobtrusiveJavaScript(true);
}

@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        //general
        settings.Name = "GridView";
        settings.KeyFieldName = "Id";
        settings.CallbackRouteValues = new { Controller = "CuadernosBancarios", Action = "CuadernosBancariosLin" };
        settings.EnableRowsCache = true;
        settings.KeyboardSupport = true;
        settings.Width = Unit.Percentage(100);
        //settings.Height = Unit.Pixel(500);
        settings.SettingsPager.Visible = true;

        //edition
        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "CuadernosBancarios", Action = "CuadernosBancariosLinAddNew" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "CuadernosBancarios", Action = "CuadernosBancariosLinUpdate" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "CuadernosBancarios", Action = "CuadernosBancariosLinDelete" };
        settings.SettingsEditing.Mode = GridViewEditingMode.Inline;
        settings.SettingsBehavior.ConfirmDelete = false;
        settings.Styles.Footer.HorizontalAlign = HorizontalAlign.Right;
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;

        settings.Columns.Add(c =>
        {
            c.FieldName = "Id";
            c.Visible = false;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "TipoCampo";
            c.Name = "TipoCampo";
            c.FixedStyle = GridViewColumnFixedStyle.Left;
            c.ColumnType = MVCxGridViewColumnType.ComboBox;
            var comboBoxProperties = c.PropertiesEdit as ComboBoxProperties;
            foreach (int i in Enum.GetValues(typeof(CuadernosBancariosLinModel.TipoCampos)))
                comboBoxProperties.Items.Add(Funciones.GetEnumByStringValueAttribute((CuadernosBancariosLinModel.TipoCampos)i), i);

            comboBoxProperties.ValueType = typeof(int);
            comboBoxProperties.DropDownStyle = DropDownStyle.DropDownList;


        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Posicion";
            c.Name = "Posicion";
            c.FixedStyle = GridViewColumnFixedStyle.Left;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Longitud";
            c.Name = "Longitud";
            c.FixedStyle = GridViewColumnFixedStyle.Left;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "EtiquetaIni";
            c.Name = "EtiquetaIni";
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "Campo";
            c.Name = "Campo";
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "EtiquetaFin";
            c.Name = "EtiquetaFin";
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "DescripcionLin";
            c.Name = "DescripcionLin";
        });

        settings.CommandColumn.ButtonType = GridCommandButtonRenderMode.Button;
        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowNewButton = false;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.Width = Unit.Pixel(125);
        settings.Styles.CommandColumnItem.CssClass = "btn btn-info";
        settings.Styles.CommandColumnItem.BorderStyle = BorderStyle.None;
        settings.CommandColumn.VisibleIndex = 8;
        settings.SettingsEditing.ShowModelErrorsForEditors = true;

        if (ViewData["Formato"] != null && ViewData["Formato"] != "")
        {
            //var pantalla = sender as MVCxGridView;
            var formato = ViewData["Formato"];
            settings.Columns["EtiquetaIni"].Visible = formato.ToString() == "Fijo" ? false : true;
            settings.Columns["EtiquetaFin"].Visible = formato.ToString() == "Fijo" ? false : true;
        }

        settings.ClientSideEvents.RowDblClick = "function(s,e) {s.StartEditRow(e.visibleIndex)} ";
        settings.ClientSideEvents.FocusedRowChanged = "function(s,e) { FunOnFocusedRowChanged(s, e);} ";
        settings.ClientSideEvents.Init = "function(s,e) { GridView.Focus();}";

        if (ViewBag.ReadOnly != null && ViewBag.ReadOnly)
        {
            settings.CommandColumn.Visible = false;
            settings.ClientSideEvents.RowDblClick = null;
        }
        //display
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
        settings.EditFormLayoutProperties.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
        settings.EditFormLayoutProperties.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 600;
        settings.ControlStyle.Border.BorderColor = ColorTranslator.FromHtml("#DDDDDD");
        settings.Styles.Footer.BackColor = ColorTranslator.FromHtml("#F2F2F2");
        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Left;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;



    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);

    }

}
@grid.Bind(Model).GetHtml()

<script type="text/javascript">
    function FunOnFocusedRowChanged(s, e) {
        $("#GridView").unbind("keydown");
        $('#GridView').keydown(function (event) {


            var keycode = (event.keyCode ? event.keyCode : event.which);
            var index = s.GetFocusedRowIndex();

            switch (keycode) {
                case 113://editar
                    if (!GridView.IsEditing()) {

                        GridView.StartEditRow(index);
                    }
                    break;
                case 46://Eliminar
                    if (!GridView.IsEditing()) {
                        GridView.DeleteRow(index);
                    }
                    break;
                case 27://escape
                    if (GridView.IsEditing()) {
                        GridView.CancelEdit();
                        GridView.Focus();
                    }
                    break;
                case 13://enter
                    if (GridView.IsEditing()) {
                        GridView.Focus();
                        GridView.UpdateEdit();
                    }
                    break;
                case 107://mas
                    CreateRow();
                    break;
            }

        });
    }

    function CreateRow() {
        if (!GridView.IsEditing()) {
            GridView.Focus();
            GridView.AddNewRow();

        }
    }
    $(document).ready(function () {
        GridView.Focus();
    });
</script>
