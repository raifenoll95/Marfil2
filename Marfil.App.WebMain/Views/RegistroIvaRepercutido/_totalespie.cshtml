@using Marfil.App.WebMain.Misc
@using Marfil.Dom.Persistencia.Model.Documentos.Facturas
@using Marfil.Dom.Persistencia.Model.Iva
@using Marfil.Dom.Persistencia.Model.Configuracion
@using Marfil.Dom.Persistencia.Model.Configuracion.Inmueble
@using Marfil.App.WebMain.Misc
@using Marfil.Dom.Persistencia.Model.Configuracion.Cuentas
@using Marfil.Dom.Persistencia.ServicesView.Servicios.Campoverificacion
@using Marfil.Inf.ResourcesGlobalization.Textos.Entidades
@using Marfil.Dom.Persistencia.Model.FicherosGenerales;
@using Resources

@model RegistroIvaRepercutidoModel
@{
    var isreadonly = ViewData["readonly"] != null ? (bool)ViewData["readonly"] : false;
    var iseditable = ViewData["operacion"] != null && (ViewData["operacion"] == "Edit");
    var isNuevo = !isreadonly && !iseditable;

    var cvfactura = FCampoverificacion.Instance.GetModel<FacturasModel>(WebHelper.ContextService);
    var cvcuenta = FCampoverificacion.Instance.GetModel<CuentasModel>(WebHelper.ContextService);
    var cvretencion = FCampoverificacion.Instance.GetModel<TiposRetencionesModel>(WebHelper.ContextService);
    var cvinmueble = FCampoverificacion.Instance.GetModel<InmueblesModel>(WebHelper.ContextService);
    var cvctatesoreria = FCampoverificacion.Instance.GetModel<CuentasModel>(WebHelper.ContextService);

    var listperiodo = WebHelper.GetApplicationHelper().GetListPeriodoRegistroIva().Select(f => new SelectListItem()
    {
        Text = f.Text,
        Value = f.Value,

    }).ToList();

    var listmotivos = WebHelper.GetApplicationHelper().GetListMotivosRectificacion().Select(f => new SelectListItem() { Value = f.Valor, Text = f.Descripcion }).ToList();

}

<script src="@Url.Content("~/Scripts/jquery.redirect.js")"></script>
<script src="@Url.Content("~/Scripts/Model/Articulos/Formulas/Formulas.js")"></script>
<script src="@Url.Content("~/Scripts/Model/Articulos/Formulas/FormulasService.js")"></script>
<script src="@Url.Content("~/Scripts/Model/Facturas/VencimientosController.js")"></script>

</br>
<div class="form-group" id="Retenciones">
    @Html.LabelFor(f => Model.Baseretencion, new { @class = "control-label col-md-2" })
    <div class="col-md-2">
        @Html.TextBoxFor(f => Model.SBaseretencion, new { @class = "form-control", @autofocus = "", @readonly = "readonly" })
    </div>

    @Html.LabelFor(f => Model.Porcentajeretencion, new { @class = "control-label col-md-2" })
    <div class="col-md-2">
        @Html.TextBoxFor(f => Model.Porcentajeretencion, isreadonly ? (object)new { @class = "form-control", @autofocus = "", @readonly = "readonly" } : (object)new { @class = "form-control", @autofocus = "" })
    </div>

    @Html.LabelFor(f => Model.Importeretencion, new { @class = "control-label col-md-2" })
    <div class="col-md-2">
        @Html.TextBoxFor(f => Model.SImporteretencion,(object)new { @class = "form-control", @autofocus = "", @readonly = "readonly" } )
    </div>
</div>

<div class="form-group" id="Operaciones">  
    @Html.LabelFor(f => Model.Operacionesexluidasbi, new { @class = "control-label col-md-2" })
    <div class="col-md-2">
        @Html.TextBoxFor(f => Model.Operacionesexluidasbi, isreadonly ? (object)new { @class = "form-control", @autofocus = "", @readonly = "readonly" } : (object)new { @class = "form-control", @autofocus = "" })
    </div>
</div>

<div class="form-group" id="Total">
    @Html.LabelFor(f => Model.Totalfactura, new { @class = "control-label col-md-2" })
    <div class="col-md-2">
        @Html.TextBoxFor(f => Model.STotalfactura, new { @class = "form-control", @autofocus = "", @readonly = "readonly" } )
    </div>
</div>

<h6>Los cálculos de la base de retención, del importe de retención y del total de factura se actualizan al crear/guardar el registro.</h6>

@{
    if (isNuevo || iseditable)
    {
        <script src="@Url.Content("~/components/bootbox.js/bootbox.min.js")"></script>
        <script src="@Url.Content("~/Scripts/Model/Misc/VerificaPk.js")"></script>
    }
}


<script type="text/javascript">



</script>